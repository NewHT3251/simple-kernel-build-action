name: 'Android Kernel Build Action'
description: "Action to build Android kernel"

inputs:
  KERNEL_SOURCE:
    description: 'Kernel source repository URL'
    required: true
  KERNEL_BRANCH:
    description: 'Branch name for kernel source'
    required: false
    default: 'main'
  KERNEL_CONFIG:
    description: 'Kernel configuration name (e.g. defconfig)'
    required: true
  ARCH:
    description: 'Target architecture'
    required: true
    default: 'arm64'
    
  # Toolchain options
  COMPILER:
    description: 'compiler to use (gcc|clang)'
    required: false
    default: 'gcc'
  TOOLCHAIN_CLONE_CMD:
    description: 'Link of compiler to clone and use'
    required: false
    default: 'git clone https://github.com/djb77/aarch64-linux-android-4.9 ./toolchain/gcc'
    
  # Features
  ENABLE_KSU:
    description: 'Enable KernelSU support for non-gki (non-kprobe)'
    required: false
    default: false
  KSU_CURL_COMMAND:
    description: 'External KernelSU curl command (check KernelSU readme)'
    required: false
    default: 'curl -LSs "https://raw.githubusercontent.com/mlm-games/KernelSU-Non-GKI/main/kernel/setup-subm.sh" | bash -s '
    
  ENABLE_CCACHE:
    description: 'Enable ccache support'
    required: false 
    default: true
    
  # Output options
  OUTPUT_PACKAGE_FORMAT:
    description: 'Output package format (anykernel3|boot.img)'
    required: false
    default: 'anykernel3'

runs:
  using: 'composite'
  steps:
    - name: Setup Build Environment
      shell: bash
      run: |
        sudo apt-get update
        set +e
        sudo apt-get install -y build-essential bc bison flex libssl-dev ccache binutils git make openssl curl zip kmod cpio flex libelf-dev libssl-dev libtfm-dev libc6-dev device-tree-compiler ca-cer
        set -e
        
    - name: Setup ccache
      if: inputs.ENABLE_CCACHE == 'true'
      uses: hendrikmuhs/ccache-action@v1.2
        
    - name: Clone Kernel Source
      shell: bash
      run: |
        git clone ${{ inputs.KERNEL_SOURCE }} -b ${{ inputs.KERNEL_BRANCH }} --depth=1 kernel_source
        cd kernel_source
        
    - name: Setup Toolchain
      shell: bash
      run: |
        if [ "${{ inputs.COMPILER }}" = "clang" ]; then
          echo "Cloning clang repo..."
          git clone ${{ inputs.OTHER_CLANG_REPO }} $HOME/clang
        else
          echo "Cloning GCC..."
          ${{ inputs.TOOLCHAIN_CLONE_CMD }}
       fi
        
    - name: Setup KernelSU
      if: inputs.ENABLE_KSU == 'true'
      shell: bash
      run: |
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s "${{ inputs.KSU_CURL_COMMAND }}"
        
    - name: Build Kernel
      shell: bash
      run: |
        cd kernel_source
        make ${{ inputs.KERNEL_CONFIG }} ARCH=${{ inputs.ARCH }}
        make -j$(nproc) ARCH=${{ inputs.ARCH }}
        
    - name: Package Kernel
      shell: bash
      run: |
        if [ "${{ inputs.OUTPUT_PACKAGE_FORMAT }}" = "anykernel3" ]; then
           ANYKERNEL_URL="${{ inputs.anykernel3-url }}"
          if [ -z "$ANYKERNEL_URL" ]; then
            ANYKERNEL_URL="https://github.com/osm0sis/AnyKernel3"
          fi
          git clone "$ANYKERNEL_URL" --depth=1 AnyKernel3
          
          # Copy kernel
          cp arch/${{ inputs.arch }}/boot/Image* AnyKernel3/
          [ -f arch/${{ inputs.arch }}/boot/dtbo.img ] && \
            cp arch/${{ inputs.arch }}/boot/dtbo.img AnyKernel3/
          [ -f arch/${{ inputs.arch }}/boot/dtb.img ] && \
            cp arch/${{ inputs.arch }}/boot/dtb.img AnyKernel3/
            
          cd AnyKernel3
          zip -r9 ../../build/kernel-${{ github.sha }}.zip *

branding:
  icon: 'cpu' 
  color: 'blue'
