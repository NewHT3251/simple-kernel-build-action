name: 'Android Kernel Builder Action'
author: 'Ragebreaker'
description: "Action to build Android kernel"

inputs:
  KERNEL_CLONE_CMD:
    description: 'Command to clone kernel source code'
    required: true
    default: ${{github.repository}}
  KERNEL_CONFIG:
    description: 'Kernel configuration name (e.g. defconfig)'
    required: true
  ARCH:
    description: 'Target architecture'
    required: true
    default: 'arm64'
  MAKE_ARGS:
    description: 'Arguments for make command (both defconfig and kernel)'
    required: false
    default: 'O=out PATH=$HOME/clang/bin:$PATH CC="ccache clang" CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-'
  DTB_FILENAME:
    description: 'name of compiled dtb (if present)'
    required: false
    default: 'dtb.img'
  DTBO_FILENAME:
    description: 'name of compiled dtbo (if present)'
    reuired: false
    default: 'dtbo.img'
    
  # Toolchain options
  # COMPILER:
  #   description: 'compiler to use (gcc|clang)'
  #   required: false
  #   default: 'gcc'
  TOOLCHAIN_CLONE_CMD:
    description: 'Link of compiler to clone and use'
    required: false
    default: 'mkdir -p $HOME/clang && wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master/clang-r530567.tar.gz -O clang.tar.gz && tar xf clang.tar.gz -C $HOME/clang && sudo apt install gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi'
    
  # Features
  ENABLE_KSU:
    description: 'Enable KernelSU support for non-gki (non-kprobe) ( ONLY ENABLE IF NOT ALREADY INTEGRATED!!! )'
    required: false
    default: false
  KSU_CURL_COMMAND:
    description: 'External KernelSU curl command (check KernelSU readme)'
    required: false
    default: 'curl -LSs "https://raw.githubusercontent.com/mlm-games/KernelSU-Non-GKI/main/kernel/setup-subm.sh" | bash -s '
    
  ENABLE_CCACHE:
    description: 'Enable ccache support'
    required: false 
    default: true
    
  # Output options
  # OUTPUT_PACKAGE_FORMAT:
  #   description: 'Output package format (anykernel3|boot.img)'
  #   required: false
  #   default: 'anykernel3'
  ANYKERNEL_URL:
    description: 'Url for anykernel3 repo.'
    required: false
    default: 'https://github.com/mlm-games/AnyKernel3'
    

runs:
  using: 'composite'
  steps:
    - name: Setup Build Environment
      shell: bash
      run: |
        sudo apt-get update
        set +e
        sudo apt-get install -y build-essential bc bison flex libssl-dev ccache binutils git make openssl curl zip kmod cpio libelf-dev libssl-dev libtfm-dev libc6-dev device-tree-compiler ca-cer
        set -e
        
    - name: Setup ccache
      if: inputs.ENABLE_CCACHE == 'true'
      uses: hendrikmuhs/ccache-action@v1.2
        
    - name: Clone Kernel Source
      shell: bash
      run: |
        if [ ${{ inputs.KERNEL_CLONE_CMD }} == ${{ github.repository }} ]; then
          git clone https://github.com/${{ github.repository }} --depth=1 kernel_source
        else
          ${{ inputs.KERNEL_CLONE_CMD }} --depth=1 kernel_source
        fi
        
    - name: Setup Toolchain and ccache vars
      shell: bash
      run: |
          echo "performing clang or gcc download and extraction..."
          ${{ inputs.TOOLCHAIN_CLONE_CMD }}
          if [ ${{ inputs.ENABLE_CCACHE }} = true ]; then
            export USE_CCACHE=1
            export PATH="/usr/lib/ccache:$PATH"
          fi

        
    - name: Setup KernelSU
      if: inputs.ENABLE_KSU == 'true'
      shell: bash
      run: |
        cd kernel_source
        ${{ inputs.KSU_CURL_COMMAND }}
        python3 KernelSU/scripts/integrate-no-kprobe.py ${{ inputs.KERNEL_CONFIG }}
        
    - name: Build Kernel
      shell: bash
      run: |
        cd kernel_source
        make ${{ inputs.KERNEL_CONFIG }} ARCH=${{ inputs.ARCH }} ${{ inputs.MAKE_ARGS }}
        make -j$(nproc) ARCH=${{ inputs.ARCH }} ${{ inputs.MAKE_ARGS }}
        
    - name: Package Kernel
      shell: bash
      run: |
        cd kernel_source
        curl -LSs "https://raw.githubusercontent.com/mlm-games/KernelSU-Non-GKI/main/kernel/setup-subm.sh" | bash -s 
        ./KernelSU/scripts/kernel_zipper.sh --dtb=arch/${{ inputs.ARCH }}/boot/${{ inputs.DTB_FILENAME }} --dtbo=arch/${{ inputs.ARCH }}/boot/${{ inputs.DTBO_FILENAME }}

branding:
  icon: 'cpu' 
  color: 'blue'
